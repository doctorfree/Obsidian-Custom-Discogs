#!/bin/bash
#
# search-albums-markdown - written by Ronald Joe Record <ronaldrecord@gmail.com>
#
# Generate markdown for albums retrieved from a previously completed Discogs search
#
# Set your Discogs username and API token in ~/.config/mpprc as:
# DISCOGS_USER and DISCOGS_TOKEN
# Alternately, they can be provided on the command line or set here.
#
#-----------SET DISCOGS USERNAME-----------------------
DISCOGS_USER=
#
# Discogs API token
# See https://www.discogs.com/settings/developers
# API requests are throttled to 60 per minute for authenticated
# requests and 25 per minute for unauthenticated requests.
#
#-----------SET DISCOGS API TOKEN-----------------------
DISCOGS_TOKEN=
#
# A Discogs username is required.
#
# A Discogs API token is not required. However, API requests for
# unauthenticated users are throttled to 25 per minute and images
# are not available to unauthenticated users.

URL="https://api.discogs.com"
SRL="${URL}/database/search"
REL="${URL}/releases"
MRL="${URL}/masters"
AGE="ObsidianCustomDiscogs/1.0.2 +https://github.com/doctorfree/Obsidian-Custom-Discogs"

# Dot in the user configuration file if it exists
[ -f ${HOME}/.config/mpprc ] && . ${HOME}/.config/mpprc

usage() {
  printf "\nUsage: search-albums-markdown [-f] [-r] [-U] [-u username] [-t token] [-v vault] [-h] /path/to/artists"
  printf "\nWhere:"
  printf "\n\t-f indicates force overwrite of previously generated files."
  printf "\n\t-r indicates remove all previously retrieved album json files."
  printf "\n\t-u 'username' specifies your Discogs username."
  printf "\n\t-t 'token' specifies your Discogs API token."
  printf "\n\t-v 'vault' specifies the folder name where artist/album markdown goes."
  printf "\n\t\tDefault: Music_Library"
  printf "\n\t-h displays this usage message and exits.\n"
  printf "\nA Discogs username and API token are required."
  printf "\nA Discogs username and token can be added to ~/.config/mpprc as the variables"
  printf "\n\tDISCOGS_USER and DISCOGS_TOKEN"
  printf "\nor specified on the command line with '-u username' and '-t token'\n"
  exit 1
}

overwrite=
remove=
artists_dir=
coverfolder="../../assets/albumcovers"
vault="Music_Library"
# Command line arguments override config file settings
while getopts "v:fru:t:h" flag; do
    case $flag in
        v)
            vault="$OPTARG"
            ;;
        f)
            overwrite=1
            ;;
        r)
            remove=1
            ;;
        u)
            DISCOGS_USER="$OPTARG"
            ;;
        t)
            DISCOGS_TOKEN="$OPTARG"
            ;;
        h)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

[ "${DISCOGS_USER}" ] && [ "${DISCOGS_TOKEN}" ] || {
  echo "Discogs username and API token are required."
  echo "Set DISCOGS_USER and DISCOGS_TOKEN in ${HOME}/.config/mpprc or on the command line."
  echo "Exiting."
  exit 1
}

artists_dir="$1"
TOP="../../${vault}"

[ "${artists_dir}" ] && [ -d "${artists_dir}" ] || {
  echo "No path to artist/albums specified or path is not a directory"
  usage
}

echo "Generating markdown for all artists/albums/tracks in ${artists_dir}"
echo "Please be patient. A large music library may take a while."
echo ""

[ -d "${TOP}" ] || mkdir -p "${TOP}"
[ -d "${coverfolder}" ] || {
  [ -d "../../assets" ] || mkdir -p "../../assets"
  mkdir -p "${coverfolder}"
}

# From https://gist.github.com/cdown/1163649
urlencode() {
  old_lc_collate=$LC_COLLATE
  LC_COLLATE=C
  local length="${#1}"
  for (( i = 0; i < length; i++ ))
  do
    local c="${1:$i:1}"
    case $c in
        [a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
        *) printf '%%%02X' "'$c" ;;
    esac
  done
  LC_COLLATE=$old_lc_collate
}

make_release_markdown() {
  for release_json in "${OUT}"/*.json
  do
    [ "${release_json}" == "${OUT}/*.json" ] && continue
    releaseid=$(/bin/cat "${release_json}" | jq -r '.id')
    [ "${releaseid}" == "0" ] || [ "${releaseid}" == "null" ] && releaseid=
    masterid=$(/bin/cat "${release_json}" | jq -r '.master_id')
    [ "${masterid}" == "0" ] || [ "${masterid}" == "null" ] && masterid=
    [ "${releaseid}" == "" ] || [ "${masterid}" == "${releaseid}" ] && {
      # Retrieve master release
      [ -s "${OUT}/masters/${masterid}_master.json" ] || {
        curl --stderr /dev/null \
          -A "${AGE}" "${MRL}/${masterid}" \
          -H "Authorization: Discogs token=${DISCOGS_TOKEN}" | \
          jq -r '.' > ${OUT}/masters/${masterid}_master.json
        sleep 1
      }
      [ -s "${OUT}/masters/${masterid}_master.json" ] && {
        releaseid=$(/bin/cat "${OUT}/masters/${masterid}_master.json" | jq -r '.main_release')
      }
    }

    [ -d "${RELOUT}/${releaseid}" ] || mkdir -p "${RELOUT}/${releaseid}"
    [ "${overwrite}" ] && {
      rm -f "${RELOUT}/${releaseid}/${releaseid}.json"
    }
    [ -s "${RELOUT}/${releaseid}/${releaseid}.json" ] || {
      curl --stderr /dev/null \
        -A "${AGE}" "${REL}/${releaseid}" \
        -H "Authorization: Discogs token=${DISCOGS_TOKEN}" | \
        jq -r '.' > "${RELOUT}/${releaseid}/${releaseid}.json"
      sleep 1
    }
    message=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | jq -r '.message'`
    echo "${message}" | grep "Release not found" > /dev/null && continue

    [ -s "${RELOUT}/${releaseid}/${releaseid}_genres.json" ] || {
      cat "${RELOUT}/${releaseid}/${releaseid}.json" | jq -r '.genres[]?' > \
        "${RELOUT}/${releaseid}/${releaseid}_genres.json"
    }
    [ -s "${RELOUT}/${releaseid}/${releaseid}_styles.json" ] || {
      cat "${RELOUT}/${releaseid}/${releaseid}.json" | jq -r '.styles[]?' > \
        "${RELOUT}/${releaseid}/${releaseid}_styles.json"
    }

    title=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | jq -r '.title'`
    titlename=`echo ${title} | \
               sed -e "s% %_%g" \
                   -e "s%,%_%g" \
                   -e "s%(%%g" \
                   -e "s%)%%g" \
                   -e "s%:%-%g" \
                   -e "s%\#%%g" \
                   -e "s%\.%%g" \
                   -e "s%\"%%g" \
                   -e "s%\&%and%g" \
                   -e "s%\?%%g" \
                   -e "s%\\'%%g" \
                   -e "s%'%%g" \
                   -e "s%/%-%g"`

    artist=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | \
      jq -r '.artists[0].name' | sed -e 's/ ([[:digit:]]\+)//'`
    artistname=`echo ${artist} | \
                sed -e "s% %_%g" \
                    -e "s%,%_%g" \
                    -e "s%(%%g" \
                    -e "s%)%%g" \
                    -e "s%:%-%g" \
                    -e "s%\#%%g" \
                    -e "s%\.%%g" \
                    -e "s%\"%%g" \
                    -e "s%\&%and%g" \
                    -e "s%\?%%g" \
                    -e "s%\\'%%g" \
                    -e "s%'%%g" \
                    -e "s%/%-%g"`

    filename="${artistname}-${titlename}"
    markdown="${titlename}.md"

    [ "${overwrite}" ] && rm -f "${coverfolder}/${filename}.png"
    [ -f "${coverfolder}/${filename}.png" ] || {
      coverurl=$(cat "${RELOUT}/${releaseid}/${releaseid}.json" | \
        jq -r '.images[0].resource_url')
      suffix=`echo "${coverurl}" | awk -F '/' ' { print $NF } ' | \
                                   awk -F '.' ' { print $NF } '`
      wget -q -O "${filename}.${suffix}" "${coverurl}"
      [ "${suffix}" == "png" ] || {
        convert "${filename}.${suffix}" "${filename}.png" 2> /dev/null
        rm -f "${filename}.${suffix}"
      }
    }
    [ -s "${filename}.png" ] && {
      [ -d "${coverfolder}" ] && {
        mv "${filename}.png" "${coverfolder}/${filename}.png"
      }
    }
    rm -f "${filename}.png"

    generate=1
    [ "${update}" ] && {
      [ -f "${TOP}/${artistname}/${markdown}" ] && generate=
    }
    [ "${generate}" ] && {
      label=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | jq -r '.labels[0].name'`

      echo "Generating markdown for ${artist} / ${title}"
      echo "---" > "${markdown}"
      echo "title: ${title}" >> "${markdown}"
      echo "artist: ${artist}" >> "${markdown}"
      echo "label: ${label}" >> "${markdown}"

      formats=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | \
               jq -r '.formats[]?' | jq -r '.name'`
      cat "${RELOUT}/${releaseid}/${releaseid}.json" | \
               jq -r '.formats[]?' | \
               jq -r '.descriptions[]?' > "${releaseid}_formats.txt"

      # Insert format data for this album
      while read format
      do
        [ "${format}" == "null" ] && format=
        [ "${format}" ] || continue
        formats="${formats}, ${format}"
      done < <(/bin/cat "${releaseid}_formats.txt")
      rm -f ${releaseid}_formats.txt
      echo "formats: ${formats}" >> "${markdown}"

      # Insert genre/styles data for this album
      first=1
      genres=
      while read genre
      do
        genre=`echo "${genre}" | sed -e "s/\"//g"`
        [ "${genre}" == "null" ] && genre=
        [ "${genre}" ] || continue
        if [ "${first}" ]
        then
          genres="${genre}"
          first=
        else
          genres="${genres}, ${genre}"
        fi
      done < <(/bin/cat "${RELOUT}/${releaseid}/${releaseid}_genres.json")

      while read style
      do
        style=`echo "${style}" | sed -e "s/\"//g"`
        [ "${style}" == "null" ] && style=
        [ "${style}" ] || continue
        genres="${genres}, ${style}"
      done < <(/bin/cat "${RELOUT}/${releaseid}/${releaseid}_styles.json")
      echo "genres: ${genres}" >> "${markdown}"

      rating=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | \
        jq '.community.rating.average'`
      echo "rating: ${rating}" >> "${markdown}"

      released=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | \
        jq -r '.released'`
      echo "released: ${released}" >> "${markdown}"

      # Get year from master release if there is one, otherwise use year of release
      [ -s "${OUT}/masters/${masterid}_master.json" ] && {
        year=$(/bin/cat "${OUT}/masters/${masterid}_master.json" | jq -r '.year')
      }
      [ "${year}" == "null" ] && year=
      [ "${year}" ] || {
        year=$(/bin/cat "${release_json}" | jq -r '.year')
      }
      [ "${year}" == "null" ] && year=
      [ "${year}" ] || {
        year=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | jq -r '.year'`
      }
      echo "year: ${year}" >> "${markdown}"

      echo "releaseid: ${releaseid}" >> "${markdown}"

      # These are the custom collection fields for my collection
      echo "mediacondition: ${mediacondition}" >> "${markdown}"
      echo "sleevecondition: ${sleevecondition}" >> "${markdown}"
      echo "speed: ${speed}" >> "${markdown}"
      echo "weight: ${weight}" >> "${markdown}"
      echo "notes: ${notes}" >> "${markdown}"
      echo "---" >> "${markdown}"
      echo "" >> "${markdown}"

      echo "# ${title}" >> "${markdown}"
      echo "" >> "${markdown}"

      echo "By [${artist}](${artistname}_Artist.md)" >> "${markdown}"
      echo "" >> "${markdown}"

      [ -f "${coverfolder}/${filename}.png" ] && {
        echo "![](../../assets/albumcovers/${filename}.png)" >> "${markdown}"
        echo "" >> "${markdown}"
      }

      echo "## Album Data" >> "${markdown}"
      echo "" >> "${markdown}"

      uri=`cat "${RELOUT}/${releaseid}/${releaseid}.json" | jq -r '.uri'`
      echo "[Discogs URL](${uri})" >> "${markdown}"
      echo "" >> "${markdown}"

      echo "- Label: ${label}" >> "${markdown}"
      echo "- Formats: ${formats}" >> "${markdown}"
      echo "- Genres: ${genres}" >> "${markdown}"
      echo "- Rating: ${rating}" >> "${markdown}"
      echo "- Released: ${released}" >> "${markdown}"
      echo "- Year: ${year}" >> "${markdown}"
      echo "- Release ID: ${releaseid}" >> "${markdown}"
      echo "- Media condition: ${mediacondition}" >> "${markdown}"
      echo "- Sleeve condition: ${sleevecondition}" >> "${markdown}"
      echo "- Speed: ${speed}" >> "${markdown}"
      echo "- Weight: ${weight}" >> "${markdown}"
      echo "- Notes: ${notes}" >> "${markdown}"
      echo "" >> "${markdown}"

      [ -s "${RELOUT}/${releaseid}/${releaseid}_tracks.json" ] || {
        cat "${RELOUT}/${releaseid}/${releaseid}.json" | \
          jq -r '.tracklist[]? | "\(.position)%\(.title)%\(.duration)"' > \
          "${RELOUT}/${releaseid}/${releaseid}_tracks.json"
      }

      # Create track list for this album
      echo "## Album Tracks" > /tmp/__insert__
      echo "" >> /tmp/__insert__
      echo "| **Position** | **Title** | **Duration** |" >> /tmp/__insert__
      echo "|--------------|-----------|--------------|" >> /tmp/__insert__
      cat "${RELOUT}/${releaseid}/${releaseid}_tracks.json" | while read track
      do
        [ "${track}" ] || continue
        position=`echo "${track}" | awk -F '%' ' { print $1 } '`
        title=`echo "${track}" | awk -F '%' ' { print $2 } '`
        duration=`echo "${track}" | awk -F '%' ' { print $3 } '`
        echo "| ${position} | **${title}** | ${duration} |" >> /tmp/__insert__
      done
      echo "" >> /tmp/__insert__
      cat ${markdown} /tmp/__insert__ > /tmp/foo$$
      cp /tmp/foo$$ ${markdown}
      rm -f /tmp/foo$$ /tmp/__insert__

      [ -s "${RELOUT}/${releaseid}/${releaseid}_extra.json" ] || {
        cat "${RELOUT}/${releaseid}/${releaseid}.json" | \
          jq -r '.extraartists[]? | "\(.name)%\(.role)"' > \
          "${RELOUT}/${releaseid}/${releaseid}_extra.json"
      }
      [ -s "${RELOUT}/${releaseid}/${releaseid}_extra.json" ] && {
        # Insert artist roles list for this album
        echo "## Artist Roles" > /tmp/__insert__
        echo "" >> /tmp/__insert__
        echo "| **Name** | **Role** |" >> /tmp/__insert__
        echo "|----------|----------|" >> /tmp/__insert__
        cat "${RELOUT}/${releaseid}/${releaseid}_extra.json" | while read artistrole
        do
          [ "${artistrole}" ] || continue
          name=`echo "${artistrole}" | awk -F '%' ' { print $1 } '`
          role=`echo "${artistrole}" | awk -F '%' ' { print $2 } '`
          echo "| **${name}** | ${role} |" >> /tmp/__insert__
        done
        echo "" >> /tmp/__insert__
        cat ${markdown} /tmp/__insert__ > /tmp/foo$$
        cp /tmp/foo$$ ${markdown}
        rm -f /tmp/foo$$ /tmp/__insert__
        echo "" >> "${markdown}"
      }

      [ -d "${TOP}/${artistname}" ] || mkdir -p "${TOP}/${artistname}"
      cp "${markdown}" "${TOP}/${artistname}/${markdown}"
      rm -f "${markdown}"
    }
  done
}

# Remove all previously retrieved album json
[ "${remove}" ] && {
  rm -rf json/releases_import
}

[ -d json ] || mkdir json
[ -d json/releases_import ] || mkdir json/releases_import
[ -d json/releases_import/masters ] || mkdir json/releases_import/masters

HERE=`pwd`
RELOUT="${HERE}/json"
OUT="${HERE}/json/releases_import"

# Find albums in the Discogs database
#
# /database/search?q={query}&{?type,title,release_title,credit,artist,anv,
#                              label,genre,style,country,year,format,catno,
#                              barcode,track,submitter,contributor}

cd "${artists_dir}"

for artist in *
do
  [ "${artist}" == "*" ] && continue
  [ -d "${artist}" ] || continue
  cd "${artist}"
  style_search=
  case "${artist}" in
    Soundtrack*)
      noartist=1
      style_search="Soundtrack"
      ;;
    Compilation*|Various*)
      noartist=
      artist="Various"
      ;;
    Soundcloud|Bandcamp|Unknown|Unknown*Artist)
      noartist=1
      ;;
    *)
      noartist=
      ;;
  esac
  artist_search=`echo ${artist} | sed -e "s/_/ /g"`
  artist_search=`urlencode "${artist_search}"`
  for album in *
  do
    [ "${album}" == "*" ] && continue
    [ -d "${album}" ] || continue
    title_search=`echo "${album}" | sed -e "s/_/ /g"`
    title_search=`urlencode "${title_search}"`
    [ -f "${OUT}/${artist}_${album}.json" ] && {
      [ "${overwrite}" ] || continue
    }
    if [ "${noartist}" ]
    then
      if [ "${style_search}" ]
      then
        SEARCH_URL="${SRL}?style=${style_search}&release_title=${title_search}&format=Album"
      else
        SEARCH_URL="${SRL}?release_title=${title_search}&format=Album"
      fi
    else
      SEARCH_URL="${SRL}?release_title=${title_search}&artist=${artist_search}&format=Album"
    fi

    # Retrieve master release matching search criteria
    release=$(curl --stderr /dev/null \
      -A "${AGE}" "${SEARCH_URL}" \
      -H "Authorization: Discogs token=${DISCOGS_TOKEN}" | \
      jq -r '.results[0]?')
    sleep 1
    [ "${release}" == "null" ] || [ "${release}" == "" ] && {
      # Try again with modified artist/title
      artist_search=`echo ${artist} | sed -e "s/_/ /g" -e "s/ And / \& /g"`
      artist_search=`urlencode "${artist_search}"`
      title_search=`echo "${album}" | \
        sed -e "s/_/ /g" \
            -e "s/ Disc [0-9]//" \
            -e "s/[0-9][0-9][0-9][0-9]//g" \
            -e "s/\(Expanded \& Remastered\)//" \
            -e "s/\(Remastered\)//" \
            -e "s/\[Explicit\]//" \
            -e "s/\(DELUXE\)//" \
            -e "s/\(Remixes\)//"`
      title_search=`echo "${title_search}" | \
        sed -e 's/^ *//' -e 's/ *$//' -e "s/\[//g" -e "s/\]//g"`
      title_search=`urlencode "${title_search}"`
      if [ "${noartist}" ]
      then
        if [ "${style_search}" ]
        then
          SEARCH_URL="${SRL}?style=${style_search}&release_title=${title_search}&format=Album"
        else
          SEARCH_URL="${SRL}?release_title=${title_search}&format=Album"
        fi
      else
        SEARCH_URL="${SRL}?release_title=${title_search}&artist=${artist_search}&format=Album"
      fi
      release=$(curl --stderr /dev/null \
        -A "${AGE}" "${SEARCH_URL}" \
        -H "Authorization: Discogs token=${DISCOGS_TOKEN}" | \
        jq -r '.results[0]?')
      sleep 1
      [ "${release}" == "null" ] || [ "${release}" == "" ] && continue
    }
    echo "${release}" > "${OUT}/${artist}_${album}.json"
  done
  cd ..
done

cd "${HERE}"

make_release_markdown
